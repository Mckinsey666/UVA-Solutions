#include <iostream>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <iomanip>
#include <cstring>
using namespace std;

struct pole {
	double x;
	double y;
	double h;
};

bool align(pole a, pole b) {
	return ((a.y / a.x) == (b.y / b.x)) && (a.y > b.y);
}

bool hidden(pole a, pole b) {
	if (!align(a, b)) return false;
	return a.h <= b.h;
}

int main() {
	int i = 1, n;
	double _x, _y, _h;
	while (cin >> n&&n) {
		vector<pole>pv;
		vector<bool>checked(n, 0);
		vector<bool>hid(n, 0);
		for(int i=0;i<n;++i){
			cin >> _x >> _y >> _h;
			pole p = { _x,_y,_h };
			pv.push_back(p);
		}
		double ct = 0;
		for (int i = 0; i < n; ++i)
			for (int j = i + 1; j < n; ++j)
				if (hidden(pv[j], pv[i])) {
					if (!hid[j]) ct++;
					hid[j] = 1;
				}
		cout << "Data set " << i++ << ":\n";
		if (!ct)
			cout << "All the lights are visible.\n";
		else {
			cout << "Some lights are not visible:\n";
			for (int i = 0; i < n; ++i) {
				if (hid[i]) {
					ct--;
					cout << "x = " << pv[i].x << ", y = " << pv[i].y;
					if (ct) cout << ";\n";
					else cout << ".\n";
				}
			}
		}
	}
	return 0;
}
