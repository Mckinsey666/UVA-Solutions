#include <iostream>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <iomanip>
#include <cstring>
#define len 300
using namespace std;

int grid[len][len], n, ct, a;
int marked[len][len];
int cc[len][len];
bool flag;

//Recursive Flood Fill Method
void find_path(int i, int j) {
	if (i == n) {
		flag = true;
		return;
	}

	marked[i][j] = 1;

	if (grid[i - 1][j] && !marked[i - 1][j]) find_path(i - 1, j);
	if (grid[i - 1][j - 1] && !marked[i - 1][j - 1]) find_path(i - 1, j - 1);
	if (grid[i][j + 1] && !marked[i][j + 1]) find_path(i, j + 1);
	if (grid[i][j - 1] && !marked[i][j - 1]) find_path(i, j - 1);
	if (grid[i + 1][j] && !marked[i + 1][j]) find_path(i + 1, j);
	if (grid[i + 1][j + 1] && !marked[i + 1][j + 1]) find_path(i + 1, j + 1);
}

int main() {
	int i = 1, x, y;
	string s;
	while (cin >> n&&n) {
		memset(grid, 0, sizeof(grid));
		memset(cc, 0, sizeof(cc));

		for (int i = 1; i <= n; ++i) {
			cin >> s;
			for (int j = 1; j <= n; ++j)
				grid[i][j] = (s[j - 1] == 'b') ? 1 : 0;
		}

		for (int i = 1; i <= n; ++i) {
			memset(marked, 0, sizeof(marked));
			if (!marked[1][i]) {
				flag = 0;
				find_path(1, i);
				if (flag) break;
			}
		}

		cout << i++ << ' ';
		if (flag) cout << "B\n";
		else cout << "W\n";
	}
	return 0;
}

