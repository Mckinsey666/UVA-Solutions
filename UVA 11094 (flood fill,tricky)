// UVa.cpp : 定義主控台應用程式的進入點。
//

#include "stdafx.h"
#include <iostream>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <iomanip>
#include <cstring>
#define len 105
using namespace std;

char grid[len][len];
int m, n, ct, x, y, a, max_a;
int marked[len][len];
int cc[len][len];
bool flag;
char land;

//Recursive Flood Fill Method
void dfs(int i, int j) {
	if (x == i&&y == j) flag = false;
	marked[i][j] = 1;
	cc[i][j] = ct;
	a++;
	if (grid[i - 1][j]==land && !marked[i - 1][j]) dfs(i - 1, j);
	if (grid[i][j%n + 1] == land && !marked[i][j%n + 1]) dfs(i, j%n + 1);
	if (j == 1) {
		if (grid[i][n] == land && !marked[i][n]) dfs(i, n);
	}
	else {
		if (grid[i][j - 1] == land && !marked[i][j - 1]) dfs(i, j - 1);
	}
	if (grid[i + 1][j] == land && !marked[i + 1][j]) dfs(i + 1, j);
}
	
int main() {
	string s;
	while (cin >> m >> n){
		memset(grid, 0, sizeof(grid));
		memset(marked, 0, sizeof(marked));
		memset(cc, 0, sizeof(cc));
		ct = 1;
		max_a = 0;
		for (int i = 1; i <= m; ++i) {
			cin >> s;
			for (int j = 1; j <= n; ++j)
				grid[i][j] = tolower(s[j - 1]);
		}
		cin >> x >> y; x++; y++;
		land = grid[x][y];
		for (int i = 1; i <= m; ++i)
			for (int j = 1; j <= n; ++j)
				if (!marked[i][j] && grid[i][j] == land) {
					a = 0; flag = true;
					dfs(i, j);
					if (flag)
						max_a = max(max_a, a);
					ct++;
				}
		cout << max_a << '\n';
	}
	return 0;
}
