#include <iostream>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>

using namespace std;

typedef long long ll;
typedef vector<ll>vl;

bitset<10000010>sieve_set;
vector<ll>primes;
ll sieve_size;

void sieve(ll);
bool is_prime(ll);
vl primeFactors(ll);
ll digit_sum(ll);

int main() {
	sieve(10000000);
	int t;
	ll n;
	while (cin >> t) {
		while (t--) {
			cin >> n;
			ll k;
			for (k = n + 1;; ++k) {
				if (is_prime(k))
					continue;
				vl factors = primeFactors(k);
				ll factor_digit_sum = 0;
				for (int i = 0; i < factors.size(); ++i)
					factor_digit_sum += digit_sum(factors[i]);
				if (factor_digit_sum == digit_sum(k))
					break;
			}

			cout << k << '\n';
		}
	}
	return 0;
}

void sieve(ll upper_bound) {
	sieve_size = upper_bound + 1;
	sieve_set.reset(); sieve_set.flip();
	sieve_set.set(0, false); sieve_set.set(size_t(1), false);
	for (ll i = 2; i <= sieve_size; ++i)
		if (sieve_set.test(i)) {
			for (ll j = i*i; j <= sieve_size; j += i)
				sieve_set.set(size_t(j), false);
			primes.push_back(i);
		}
	return;
}
bool is_prime(ll n) {
	for (int i = 0; primes[i] <= sqrt(n); ++i)
		if (n%primes[i] == 0)
			return false;
	return true;
}
vl primeFactors(ll n) {
	vl factors;
	int i = 0;
	ll prime_factor = primes[i];
	while (n != 1 && prime_factor <= sqrt(n)) {
		while (n%prime_factor == 0) {
			n /= prime_factor;
			factors.push_back(prime_factor);
		}
		prime_factor = primes[++i];
	}
	if (n != 1) factors.push_back(n);
	return factors;
}
ll digit_sum(ll n) {
	ll ret = 0;
	while (n) {
		ret += n % 10;
		n /= 10;
	}
	return ret;
}
