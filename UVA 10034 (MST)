#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <queue>
#include <cstring>
#include <list>
#include <functional>
#include <utility>
#include <map>
#include <iomanip>
#define L 105

using namespace std;
typedef pair<double, double> dd;
typedef pair<double,pair<int, int> > edge;
int cc[L];

int root(int i) {
	if (cc[i] == i) return i;
	return cc[i] = root(cc[i]);
}
bool connected(int i, int j) {
	return root(i) == root(j);
}
void combine(int i, int j) {
	i = root(i);
	j = root(j);
	if (i != j)
		cc[i] = j;
}
double dist(dd a, dd b) {
	return sqrt(pow(a.first - b.first, 2) + pow(a.second - b.second, 2));
}

int main() {
	int t, n;
	double x, y;
	while (scanf_s("%d", &t) == 1) {
		while (t--) {
			vector<dd>p;
			map<dd, int>index;
			scanf_s("%d", &n);
			for (int i = 0; i < n; ++i)
				cc[i] = i;
			for (int i = 0; i < n; ++i) {
				scanf_s("%lf%lf", &x, &y);
				p.push_back(make_pair(x, y));
				index[make_pair(x, y)] = i;
			}
			priority_queue<edge, vector<edge>, greater<edge> >pq;
			for (int i = 0; i < n; ++i)
				for (int j = i + 1; j < n; ++j)
					pq.push(make_pair(dist(p[i], p[j]), make_pair(index[p[i]], index[p[j]])));
			double length = 0;
			while (!pq.empty()) {
				edge e = pq.top(); pq.pop();
				double l = e.first; pair<int, int> p = e.second;
				if (!connected(p.first, p.second)) {
					length += l;
					combine(p.first, p.second);
				}
			}
			cout << fixed << setprecision(2) << length << '\n';
			if (t)cout << '\n';
		}
	}
	return 0;
}
