#include <iostream>
#include <vector>
#include <cstdio>
#include <functional>
#include <utility>
#include <bitset>
#define bound 50000
using namespace std;
typedef long long ll;

bitset<bound + 10>bs;
vector<ll>primes;

void sieve() {
	int sz = bound + 1;
	bs.reset(); bs.flip();
	bs.set(0, 0); bs.set(1, 0);
	for (ll i = 2; i <= sz; ++i)
		if (bs.test(i)) {
			for (ll j = i*i; j <= sz; j += i)
				bs.set(j, 0);
			primes.push_back(i);
		}
}

int main() {
	sieve();
	int l, u;
	while (scanf_s("%d%d", &l, &u) == 2) {
		bitset<1000001>bst; bst.reset(); bst.flip();
		if (l == 1)bst.set(0, 0);
		for (int i = 0; primes[i] <= sqrt(u); ++i) {
			for (ll k = (l / primes[i] + (l%primes[i] != 0))*primes[i]; k <= u; k += primes[i])
				if (k / primes[i] != 1)
					bst.set(k - l, 0);
		}
		vector<ll>p;
		for (int i = 0; i <= u - l; ++i)
			if (bst.test(i))
				p.push_back(i + l);
		if (p.size() <= 1) printf_s("There are no adjacent primes.\n");
		else {
			int min_d = 1e6,max_d = 0;
			pair<int, int>min_p, max_p;
			for (int i = 0; i < p.size() - 1; ++i) {
				int d = p[i + 1] - p[i];
				if (d < min_d) {
					min_d = d;
					min_p = make_pair(p[i], p[i + 1]);
				}
				if (d > max_d) {
					max_d = d;
					max_p = make_pair(p[i], p[i + 1]);
				}
			}
			printf_s("%d,%d are closest, %d,%d are most distant.\n", min_p.first, min_p.second, max_p.first, max_p.second);
		}
	}
 	return 0;
}
