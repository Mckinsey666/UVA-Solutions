#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <queue>
#include <cstring>
#include <list>
#include <functional>
#include <utility>
#include <map>
#include <iomanip>
#include <set>
#include <cmath>
#include <string>
#include <sstream>
#include <bitset>
#define bound 50000
using namespace std;
typedef long long ll;

bitset<bound + 10>bs;
vector<ll>primes;

void sieve() {
	int sz = bound + 1;
	bs.reset(); bs.flip();
	bs.set(0, 0); bs.set(1, 0);
	for (ll i = 2; i <= sz; ++i)
		if (bs.test(i)) {
			for (ll j = i*i; j <= sz; j += i)
				bs.set(j, 0);
			primes.push_back(i);
		}
}


set<ll>factors(ll n) {
	set<ll>f;
	ll i = 0, pf = primes[i];
	while (n != 1 && pf*pf <= n) {
		while (n%pf == 0) { n /= pf; f.insert(pf); }
		pf = primes[++i];
	}
	if (n != 1)f.insert(n);
	return f;
}

int main() {
	ll n;
	sieve();
	while (scanf("%lld", &n)==1) {
		if (n == 0)break;
		ll ct = n;
		set<ll>pf = factors(n);
		for (auto factor : pf) {
			ct *= factor - 1;
			ct /= factor;
		}
		printf("%lld\n", ct);
	}
 	return 0;
}
