#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <queue>
#include <cstring>
#include <list>
#include <functional>
#include <utility>
#include <map>
#include <iomanip>
#include <set>
#include <cmath>
#include <string>
#include <sstream>
#include <bitset>
#define bound 10000000
using namespace std;
typedef long long ll;

bitset<bound + 10>bs;
vector<ll>primes;

void sieve() {
	int sz = bound + 1;
	bs.reset(); bs.flip();
	bs.set(0, 0); bs.set(1, 0);
	for (ll i = 2; i <= sz; ++i)
		if (bs.test(i)) {
			for (ll j = i*i; j <= sz; j += i)
				bs.set(j, 0);
			primes.push_back(i);
		}
}

map<ll,int>factors(ll n) {
	map<ll,int>f;
	ll i = 0, pf = primes[i];
	while (n != 1 && pf*pf <= n) {
		while (n%pf == 0) { n /= pf; f[pf]++; }
		pf = primes[++i];
	}
	if (n != 1)f[n]++;
	return f;
}

int main() {
	sieve();
	int t;
	ll a, b, c;
	while (scanf("%d", &t)==1) {
		while (t--) {
			scanf("%lld%lld", &a, &c);
			map<ll, int>a_factor = factors(a);
			map<ll, int>c_factor = factors(c);
			if (c%a != 0) printf("NO SOLUTION\n");
			else {
				b = 1;
				for (auto it = c_factor.begin(); it != c_factor.end(); ++it) {
					if (a_factor.count(it->first) != 1) b *= ll(pow(it->first, it->second));
					else if (a_factor[it->first] < it->second) b *= ll(pow(it->first, it->second));
				}
				printf("%lld\n", b);
			}
		}
	}
 	return 0;
}
