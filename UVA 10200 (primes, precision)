#include <iostream>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef vector<ll>vl;

bitset<10000010>sieve_set;
vector<ll>primes;
set<ll>prime_set;
ll sieve_size;

void sieve(ll);
bool is_prime(ll);
vl primeFactors(ll);
ll digit_sum(ll);

int main() {
	sieve(1000000);
	vector<int>check;
	for (ll n = 0; n <= 10000; ++n) {
		ll p = n*n + n + 41;
		if (p >= 1000000) {
			if (is_prime(p)) check.push_back(1);
			else check.push_back(0);

		}
		else
			if (prime_set.count(n*n + n + 41) == 1) check.push_back(1);
			else check.push_back(0);
	}
	int a, b;
	while (cin >> a >> b) {
		int ct = 0;
		for (int i = a; i <= b; ++i)
			ct += check[i];
		cout << fixed << setprecision(2) << double(100 * ct) / double(b - a + 1) + 10e-9 << '\n';
	}
	return 0;
}

void sieve(ll upper_bound) {
	sieve_size = upper_bound + 1;
	sieve_set.reset(); sieve_set.flip();
	sieve_set.set(0, false); sieve_set.set(size_t(1), false);
	for (ll i = 2; i <= sieve_size; ++i)
		if (sieve_set.test(i)) {
			for (ll j = i*i; j <= sieve_size; j += i)
				sieve_set.set(size_t(j), false);
			primes.push_back(i);
			prime_set.insert(i);
		}
	return;
}
bool is_prime(ll n) {
	for (int i = 0; primes[i] <= sqrt(n); ++i)
		if (n%primes[i] == 0)
			return false;
	return true;
}

