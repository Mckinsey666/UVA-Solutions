#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <string>
#define rep(i,a,b) for(int i=a;i<b;++i)
using namespace std;


void read(int, int, int v[10][10], char b[10][10]);
void solve(int, int, int v[10][10], char b[10][10]);
struct word {
	int i;
	string s;
};
bool compare (word& a, word& b) { return a.i < b.i; };

int main()
{
	int w, l, i = 1;
	while (cin >> w) {
		if (w == 0)
			break;
		cin >> l;
		int valid[10][10] = { 0 };
		char board[10][10];

		read(w, l,valid,board);
		cout << "puzzle #" << i << ":\n";
		solve(w, l,valid,board);
		cout << '\n';
		++i;
	}
    return 0;
}

void read(int w, int l, int valid[10][10], char board[10][10])
{
	rep(i, 0, w)
		rep(j, 0, l)
		cin >> board[i][j];
	int index = 1;
	rep(i, 0, w) {
		rep(j, 0, l) {
			if ((i == 0 || j == 0) && (board[i][j] != '*'))
				valid[i][j] = 1;
			else if (board[i][j] == '*') {
				valid[i][j] = 0;
				if (i + 1 < w)
					valid[i + 1][j] = 1;
				if (j + 1 < l)
					valid[i][j + 1] = 1;
			}
		}
	}
	rep(i, 0, w)
		rep(j, 0, l)
		if (valid[i][j])
			valid[i][j] = index++;
	return;
}
void solve(int w, int l, int valid[10][10], char board[10][10])
{
	cout << "Across\n";
	rep(i, 0, w) {
		int j = 0;
		while (j < l) {
			if (valid[i][j]) {
				cout <<setw(3)<<valid[i][j] << '.';
				while ((board[i][j] != '*')&&(j<l)) 
					cout << board[i][j++];
				cout << '\n';
			}
			++j;
		}
	}
	cout << "Down\n";
	vector<word>vw;
	rep(i, 0, l) {
		int j = 0;
		while (j < w) {
			if (valid[j][i]) {
				word wd;
				wd.i = valid[j][i];
				string str = "";
				while((board[j][i] != '*')&&(j<w)) 
					str += board[j++][i];
				wd.s = str;
				vw.push_back(wd);
			}
			++j;
		}
	}
	sort(vw.begin(), vw.end(), compare);
	rep(i, 0, vw.size()) 
		cout << setw(3) << vw[i].i << '.' << vw[i].s << '\n';
	return;
}

//Reading in data, input format, loops
